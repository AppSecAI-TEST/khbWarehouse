/**
 * 
 */
package com.yeepay.g3.core.activity.queue;


import java.util.Date;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;

import com.yeepay.g3.core.activity.dao.ActivityInvForProInfoDao;
import com.yeepay.g3.core.activity.dao.ActivityInvForProOrderDao;
import com.yeepay.g3.core.activity.dao.ActivityInvForProOrderFlowDao;
import com.yeepay.g3.core.activity.entity.ActivityInvForProInfo;
import com.yeepay.g3.core.activity.entity.ActivityInvForProOrder;
import com.yeepay.g3.core.activity.entity.ActivityInvForProOrderFlow;
import com.yeepay.g3.core.activity.entity.ActivityMemberOperecord;
import com.yeepay.g3.core.activity.service.ActivityMemberOperecordService;
import com.yeepay.g3.core.activity.service.ActivitySrcFlowPlatService;
import com.yeepay.g3.core.activity.service.ActivitySrcFlowRuleService;
import com.yeepay.g3.facade.activity.enums.ActivityInvForProOrderStatusEnum;
import com.yeepay.g3.facade.lmlc.async.event.LMTradeMessageEvent;
import com.yeepay.g3.utils.async.rabbitmq.receive.EventProcessor;
import com.yeepay.g3.utils.common.CheckUtils;

/**
 * @Description 信托交易事件接收器
 * @author zhenping.zhou
 * @CreateTime 2016年5月16日 下午2:50:30
 * @version 1.0
 */
public class LMTradeMessageProcessor implements EventProcessor {
	
	private static Logger logger = Logger.getLogger(LMTradeMessageProcessor.class);
	
	@Autowired
	private ActivityMemberOperecordService activityMemberOperecordServiceImpl;
	
	@Autowired
	private ActivitySrcFlowRuleService activitySrcFlowRuleServiceImpl;
	
	@Autowired
	private ActivitySrcFlowPlatService activitySrcFlowPlatServiceImpl;
	@Autowired
	private ActivityInvForProOrderDao activityInvForProOrderDaoImpl;
	@Autowired
	private ActivityInvForProOrderFlowDao activityInvForProOrderFlowDaoImpl;
	@Autowired
	private ActivityInvForProInfoDao ActivityInvForProInfoDaoImpl;
	@Override
	public void process(Object obj) {
		logger.info("LMTradeMessageProcessor事件处理 : " + obj);
		if(obj != null) {
			LMTradeMessageEvent event = (LMTradeMessageEvent) obj;
			
			//1.会员操作
			ActivityMemberOperecord memberOperecord = new ActivityMemberOperecord();
			memberOperecord.setMemberNo(event.getMemberNo());
			memberOperecord.setMemberTel(event.getMobileNo());
			memberOperecord.setOperateAmount(event.getAmount());
			memberOperecord.setOperateTime(event.getTradeTime());
			memberOperecord.setOperateType(event.getType());
			//用户操作时的ip地址
			memberOperecord.setClientIp(event.getClientIp());
			activityMemberOperecordServiceImpl.addActivityMemberOperecord(memberOperecord);
			
			//判断是否为投资换产品，如果是，则不发生抽奖券幸运值，流量
			if(CheckUtils.isEmpty(event.getGoodsCode())){
				//2.发送抽奖券和幸运值
				try{
					activityMemberOperecordServiceImpl.addUserRaffleTicket(memberOperecord);
				}catch(Exception e){
					logger.error("[process] info=发送投资抽奖券和幸运值异常,ERROR={}",e);
				}
				//3.投资发流量
				try {
					activityMemberOperecordServiceImpl.sendInvestFlow(event, memberOperecord);
				} catch (Exception e) {
					logger.error("[process] info=投资发放流量异常,ERROR={}",e);
				}
			}else{
				//4.投资换产品购买成功 修改订单状态 
				try {
					//先判断参数值是否为空
					if(CheckUtils.isEmpty(event.getGoodsCode()) || CheckUtils.isEmpty(event.getOrderNo())) {
						return;
					}
					//1.查询是否有此订单
					ActivityInvForProOrder orderResult = (ActivityInvForProOrder) activityInvForProOrderDaoImpl.queryOne("queryOrderByOrderCode", event.getGoodsCode());
					if(orderResult==null||orderResult.getStatus()==ActivityInvForProOrderStatusEnum.PAIDED){
						logger.info("ActivityInvForProBuySuccessProcessor事件处理  没有此订单号" +event.getGoodsCode());
						return;
					}
					//2.修改订单状态
					ActivityInvForProOrder param = new ActivityInvForProOrder();
					param.setStatus(ActivityInvForProOrderStatusEnum.PAIDED);
					param.setXtOrderCode(event.getOrderNo());
					param.setVersion(orderResult.getVersion());
					param.setId(orderResult.getId());
					activityInvForProOrderDaoImpl.update(param);
					//3.新增订单变动记录
					 ActivityInvForProOrderFlow activityInvForProOrderFlow =new ActivityInvForProOrderFlow();
					 activityInvForProOrderFlow.setOrderId(orderResult.getId());
					 activityInvForProOrderFlow.setStatus(ActivityInvForProOrderStatusEnum.PAIDED);
					 activityInvForProOrderFlow.setUpdateTime(new Date());
					 activityInvForProOrderFlowDaoImpl.add(activityInvForProOrderFlow);
					//4.更改旅游产品数量
					 ActivityInvForProInfo ActivityInvForProInfoResult = (ActivityInvForProInfo) ActivityInvForProInfoDaoImpl.queryOne("selectByPrimaryKey", orderResult.getProductId());
					 ActivityInvForProInfo activityInvForProInfo = new ActivityInvForProInfo();
					 activityInvForProInfo.setId(orderResult.getProductId());
					 activityInvForProInfo.setVersion(ActivityInvForProInfoResult.getVersion());
					 activityInvForProInfo.setUsedNum(ActivityInvForProInfoResult.getUsedNum()+orderResult.getNum());
					 ActivityInvForProInfoDaoImpl.update(activityInvForProInfo);
				} catch (Exception e) {
					logger.error("[process] info=投资换产品购买成功 修改订单状态异常,ERROR={}",e);
				}
			}
			
		}
	}
}

