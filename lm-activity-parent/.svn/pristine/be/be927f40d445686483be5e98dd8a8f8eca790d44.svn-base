/**
 * @author 陈大涛
 * 2016-7-29上午9:39:40
 */
package com.yeepay.g3.core.activity.queue;

import java.util.Date;
import java.util.List;

import javax.annotation.Resource;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;

import com.yeepay.g3.core.activity.dao.ActivityInvForProOrderDao;
import com.yeepay.g3.core.activity.dao.ActivityInvForProOrderFlowDao;
import com.yeepay.g3.core.activity.entity.ActivityInvForProOrder;
import com.yeepay.g3.core.activity.entity.ActivityInvForProOrderFlow;
import com.yeepay.g3.facade.activity.enums.ActivityInvForProOrderStatusEnum;
import com.yeepay.g3.facade.lmlc.async.event.LMTradeMessageEvent;
import com.yeepay.g3.utils.async.rabbitmq.receive.EventProcessor;
import com.yeepay.g3.utils.common.CheckUtils;

/**
 * @Description 投资换产品购买成功 修改订单状态 
 * @author 陈大涛
 * 2016-7-29上午9:39:40
 */
public class ActivityInvForProBuySuccessProcessor implements EventProcessor {

	@Autowired
	private ActivityInvForProOrderDao activityInvForProOrderDaoImpl;
	@Autowired
	private ActivityInvForProOrderFlowDao activityInvForProOrderFlowDaoImpl;
	private static Logger logger = Logger.getLogger(ActivityInvForProBuySuccessProcessor.class);
	@Override
	public void process(Object obj) {
		//消息处理
				logger.info("ActivityInvForProBuySuccessProcessor事件处理 " + obj);
				if(obj != null) {
					LMTradeMessageEvent event = (LMTradeMessageEvent) obj;
					//先判断参数值是否为空
					if(CheckUtils.isEmpty(event.getGoodsCode()) || CheckUtils.isEmpty(event.getOrderNo())) {
						return;
					}
					//1.查询是否有此订单
					ActivityInvForProOrder orderResult = (ActivityInvForProOrder) activityInvForProOrderDaoImpl.queryOne("queryOrderByOrderCode", event.getGoodsCode());
					if(orderResult==null){
						logger.info("ActivityInvForProBuySuccessProcessor事件处理  没有此订单号" +event.getGoodsCode());
						return;
					}
					//2.修改订单状态
					ActivityInvForProOrder param = new ActivityInvForProOrder();
					param.setStatus(ActivityInvForProOrderStatusEnum.PAIDED);
					param.setXtOrderCode(event.getOrderNo());
					param.setVersion(orderResult.getVersion());
					param.setId(orderResult.getId());
					activityInvForProOrderDaoImpl.update(param);
					//3.新增订单变动记录
					 ActivityInvForProOrderFlow activityInvForProOrderFlow =new ActivityInvForProOrderFlow();
					 activityInvForProOrderFlow.setOrderId(orderResult.getId());
					 activityInvForProOrderFlow.setStatus(ActivityInvForProOrderStatusEnum.PAIDED);
					 activityInvForProOrderFlow.setUpdateTime(new Date());
					 activityInvForProOrderFlowDaoImpl.add(activityInvForProOrderFlow);
				}
		
	}

}
