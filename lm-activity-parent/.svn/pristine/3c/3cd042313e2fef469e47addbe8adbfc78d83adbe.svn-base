/**
 * @descrption
 * @author 陈大涛
 * 2016-7-27下午5:03:38
 */
package com.yeepay.g3.core.activity.service.impl;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.yeepay.g3.core.activity.dao.ActivityInvForProOrderDao;
import com.yeepay.g3.core.activity.dao.ActivityInvForProOrderFlowDao;
import com.yeepay.g3.core.activity.dao.ActivityUserMessageDao;
import com.yeepay.g3.core.activity.entity.ActivityInvForProOrder;
import com.yeepay.g3.core.activity.entity.ActivityInvForProOrderFlow;
import com.yeepay.g3.core.activity.entity.ActivityUserMessage;
import com.yeepay.g3.core.activity.service.ActivityInvForProOrderService;
import com.yeepay.g3.facade.activity.enums.ActivityInvForProOrderSendMessageStatusEnum;
import com.yeepay.g3.facade.activity.enums.ActivityInvForProOrderStatusEnum;
import com.yeepay.g3.facade.activity.enums.UserMessageReadStatusEnum;
import com.yeepay.g3.utils.common.json.JSONObject;

/**
 * @author 陈大涛
 * 2016-7-27下午5:03:38
 */
@Service
public class ActivityInvForProOrderServiceImpl implements
		ActivityInvForProOrderService {

	@Resource
	private ActivityInvForProOrderDao activityInvForProOrderDaoImpl;
	@Resource
	private ActivityInvForProOrderFlowDao activityInvForProOrderFlowDaoImpl;
	@Autowired
	private ActivityUserMessageDao activityUserMessageDaoImpl;
	@Override
	public void insertInvForProOrder(
			ActivityInvForProOrder activityInvForProOrder) {
		//1.新增订单
		 activityInvForProOrderDaoImpl.add(activityInvForProOrder);
		//2.新增订单流水
		 ActivityInvForProOrderFlow activityInvForProOrderFlow =new ActivityInvForProOrderFlow();
		 activityInvForProOrderFlow.setOrderId(activityInvForProOrder.getId());
		 activityInvForProOrderFlow.setStatus(ActivityInvForProOrderStatusEnum.NO_PAID);
		 activityInvForProOrderFlow.setUpdateTime(new Date());
		 activityInvForProOrderFlowDaoImpl.add(activityInvForProOrderFlow);
	}
	@Override
	public void updateInvForProOrder(
			ActivityInvForProOrder activityInvForProOrder) {
		//1.更改订单表
		activityInvForProOrderDaoImpl.update(activityInvForProOrder);
		//2.新增订单流水
		 ActivityInvForProOrderFlow activityInvForProOrderFlow =new ActivityInvForProOrderFlow();
		 activityInvForProOrderFlow.setOrderId(activityInvForProOrder.getId());
		 activityInvForProOrderFlow.setStatus(activityInvForProOrder.getStatus());
		 activityInvForProOrderFlow.setUpdateTime(new Date());
		 activityInvForProOrderFlowDaoImpl.add(activityInvForProOrderFlow);
	}
	@Override
	public ActivityInvForProOrder queryInvForProOrderDetailById(Long id) {
		ActivityInvForProOrder result = (ActivityInvForProOrder) activityInvForProOrderDaoImpl.queryOne("selectByPrimaryKey", id);
		return result;
	}
	/* (non-Javadoc)
	 * @see com.yeepay.g3.core.activity.service.ActivityInvForProOrderService#updateOrderStatusTiming()
	 */
	@Override
	public void updateOrderStatusTiming(Date deadLine) {
		//1.查询超时订单列表
		ActivityInvForProOrder deadLineParamForQuery=new ActivityInvForProOrder();
		deadLineParamForQuery.setCreateTime(deadLine);
		List<ActivityInvForProOrder> deadLineList = activityInvForProOrderDaoImpl.query("queryOrderStatusByTiming", deadLineParamForQuery);
		//2.取消所有超时订单
		ActivityInvForProOrder deadLineParamForUpdate=new ActivityInvForProOrder();
		deadLineParamForUpdate.setCreateTime(deadLine);
		deadLineParamForUpdate.setStatus(ActivityInvForProOrderStatusEnum.CANCE);
		deadLineParamForUpdate.setOperator("定时取消");
		deadLineParamForUpdate.setOperatorTime(new Date());
		activityInvForProOrderDaoImpl.update("updateOrderStatusByTiming", deadLineParamForUpdate);
		//3.新增订单状态变动记录
		for(ActivityInvForProOrder itme :  deadLineList){
			ActivityInvForProOrderFlow activityInvForProOrderFlow =new ActivityInvForProOrderFlow();
			 activityInvForProOrderFlow.setOrderId(itme.getId());
			 activityInvForProOrderFlow.setStatus(ActivityInvForProOrderStatusEnum.CANCE);
			 activityInvForProOrderFlow.setUpdateTime(new Date());
			 activityInvForProOrderFlowDaoImpl.add(activityInvForProOrderFlow);
		}
	}
	@Override
	public void sendMessageForNoPaidOrderTiming(Date deadLine) {
		//1.发送消息
		List<ActivityUserMessage> userMessageList = new ArrayList<ActivityUserMessage>();
		//查询需要发送消息的列表
		ActivityInvForProOrder deadLineParamForQuery=new ActivityInvForProOrder();
		deadLineParamForQuery.setCreateTime(deadLine);
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		List<Map<String,Object>> deadLineList = activityInvForProOrderDaoImpl.query("queryMessageNoPaidOrderList", deadLineParamForQuery);
		for(Map<String,Object> itme : deadLineList){
			ActivityUserMessage userMessage = new ActivityUserMessage();
			try {
				JSONObject msgParam = new JSONObject();
				msgParam.put("num", itme.get("NUM").toString());
				msgParam.put("createTime",sdf.format(new Date()) );
				msgParam.put("occurTime", itme.get("CREATE_TIME"));
				msgParam.put("productName", itme.get("NAME"));
				userMessage.setMemberNo(itme.get("MEMBER_NO").toString());
				userMessage.setMsgContent(msgParam.toString());
				userMessage.setOccurTime(new Date());
				userMessage.setReadStatus(UserMessageReadStatusEnum.UNREAD);
				userMessage.setTemplateName("common_invforpro_no_paid_order.ftl");
				userMessageList.add(userMessage);
			} catch (Exception e) {
				e.printStackTrace();
			}
			//2.修改订单发送消息状态
			ActivityInvForProOrder param = new ActivityInvForProOrder();
			param.setId(Long.valueOf(itme.get("ID").toString()));
			param.setVersion(Long.valueOf(itme.get("VERSION").toString()));
			param.setSendMessageStatus(ActivityInvForProOrderSendMessageStatusEnum.SEND_MESSAGE);
			activityInvForProOrderDaoImpl.update(param);
		}
		activityUserMessageDaoImpl.insertUserMessage(userMessageList);
		
	}
	/* (non-Javadoc)
	 * @see com.yeepay.g3.core.activity.service.ActivityInvForProOrderService#queryOrderAndProInfoListByMemberNoAndStatus()
	 */
	@Override
	public List<Map<String, Object>> queryOrderAndProInfoListByMemberNoAndStatus(ActivityInvForProOrder activityInvForProOrder ) {
		List<Map<String, Object>> result = activityUserMessageDaoImpl.query("queryOrderAndProInfoListByMemberNoAndStatus", activityInvForProOrder);
		return result;
	}

}
