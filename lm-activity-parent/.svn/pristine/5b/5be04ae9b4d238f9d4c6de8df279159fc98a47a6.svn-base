/**
 * 
 */
package com.yeepay.g3.core.activity.queue;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;

import com.lanmao.consultant.facade.dto.ReceiveUserInfoParamDTO;
import com.lanmao.consultant.facade.dto.ReceiveUserInfoResultDTO;
import com.lanmao.consultant.facade.service.UserFacade;
import com.yeepay.g3.core.activity.entity.ActivityMemberOperecord;
import com.yeepay.g3.core.activity.entity.ActivityShareRecords;
import com.yeepay.g3.core.activity.entity.ActivitySrcFlowPlat;
import com.yeepay.g3.core.activity.entity.ActivitySrcFlowRule;
import com.yeepay.g3.core.activity.service.ActivityMemberOperecordService;
import com.yeepay.g3.core.activity.service.ActivityShareRecordsService;
import com.yeepay.g3.core.activity.service.ActivitySrcFlowPlatService;
import com.yeepay.g3.core.activity.service.ActivitySrcFlowRuleService;
import com.yeepay.g3.facade.activity.enums.ShareBizTypeEnum;
import com.yeepay.g3.facade.lmact.dto.Esurfing800DetailDto;
import com.yeepay.g3.facade.lmact.dto.FluxCloudDetailDto;
import com.yeepay.g3.facade.lmact.dto.FluxPlatDetailDto;
import com.yeepay.g3.facade.lmact.enumtype.ArenaDetailTypeEnum;
import com.yeepay.g3.facade.lmact.service.NewLMACTFluxCloudFacade;
import com.yeepay.g3.facade.lmact.service.NewLMACTFluxEsuring800Facade;
import com.yeepay.g3.facade.lmact.service.NewLMACTFluxPlatFacade;
import com.yeepay.g3.facade.lmportal.async.enumType.LMOperationTypeEnum;
import com.yeepay.g3.facade.lmportal.async.event.ActivityMemberRecords;
import com.yeepay.g3.facade.lmportal.dto.MemberDto;
import com.yeepay.g3.facade.lmportal.service.MemberManagementFacade;
import com.yeepay.g3.utils.async.rabbitmq.receive.EventProcessor;
import com.yeepay.g3.utils.common.CheckUtils;
import com.yeepay.g3.utils.common.StringUtils;
import com.yeepay.g3.utils.common.log.LoggerFactory;
import com.yeepay.g3.utils.config.ConfigParam;
import com.yeepay.g3.utils.config.ConfigurationUtils;
import com.yeepay.g3.utils.rmi.RemoteServiceFactory;

/**
 * @Description 会员操作记录事件接收器
 * @author zhenping.zhou
 * @CreateTime 2016年5月16日 下午2:50:30
 * @version 1.0
 */
public class ActivityMemberOperecordProcessor implements EventProcessor {
	
	@Autowired
	private ActivityMemberOperecordService activityMemberOperecordServiceImpl;
	
	@Autowired
	private ActivityShareRecordsService activityShareRecordsServiceImpl;
	
	@Autowired
	private ActivitySrcFlowRuleService activitySrcFlowRuleServiceImpl;
	
	@Autowired
	private ActivitySrcFlowPlatService activitySrcFlowPlatServiceImpl;
	
	private MemberManagementFacade memberManagementFacade = RemoteServiceFactory.getService(MemberManagementFacade.class);
	
	private NewLMACTFluxEsuring800Facade newLMACTFluxEsuring800Facade = RemoteServiceFactory.getService(NewLMACTFluxEsuring800Facade.class);
	
	private NewLMACTFluxPlatFacade newLMACTFluxPlatFacade = RemoteServiceFactory.getService(NewLMACTFluxPlatFacade.class);
	
	private NewLMACTFluxCloudFacade newLMACTFluxCloudFacade = RemoteServiceFactory.getService(NewLMACTFluxCloudFacade.class);
			
	
	private UserFacade userFacade;

	private static Logger logger = Logger.getLogger(ActivityMemberOperecordProcessor.class);
	

	@Override
	public void process(Object obj) {
		//消息处理
		logger.info("ActivityMemberOperecordProcessor事件处理 " + obj);
		if(obj != null) {
			ActivityMemberRecords event = (ActivityMemberRecords) obj;
			
			if(LMOperationTypeEnum.MEMBER_SHARE_REGISTER.toString().equals(event.getType())) {
				
				//先判断参数值是否为空
				if(CheckUtils.isNull(event.getRecommendMemberNo()) || CheckUtils.isNull(event.getMemberNo()) 
						|| CheckUtils.isNull(event.getMemberTel())) {
					return;
				}
				
				//推荐人消息
				ActivityShareRecords activityShareRecords = new ActivityShareRecords();
				activityShareRecords.setRecommendMemberNo(event.getRecommendMemberNo());
				activityShareRecords.setRecommendMemberTel(""); //推荐人手机号有可能修改
				
				if(ShareBizTypeEnum.ALL.toString().equals(event.getBizType())) {
					activityShareRecords.setBizType(ShareBizTypeEnum.ALL);
				} else if(ShareBizTypeEnum.LINE.toString().equals(event.getBizType())) {
					activityShareRecords.setBizType(ShareBizTypeEnum.LINE);
				} else if(ShareBizTypeEnum.ON_LINE.toString().equals(event.getBizType())) {
					activityShareRecords.setBizType(ShareBizTypeEnum.ON_LINE);
				} else {
					activityShareRecords.setBizType(ShareBizTypeEnum.ALL);
				}
				
				activityShareRecords.setMemberNo(event.getMemberNo());
				activityShareRecords.setMemberTel(event.getMemberTel());
				activityShareRecords.setRegisterTime(event.getRegisterTime());
				activityShareRecords.setSrcNo(event.getSrcNo());
				//新增活动推荐人关系记录
				try {
					Long id = activityShareRecordsServiceImpl.addShareRecord(activityShareRecords);
				} catch (Exception e){
					e.printStackTrace();
					logger.info("[addShareRecord] info={},ERROR={} 调用通知接口异常");
				}
				
				try{
					//发送通知线下理财顾问系统的接口调用
					ReceiveUserInfoParamDTO receiveUserInfoParamDto = new ReceiveUserInfoParamDTO();
					receiveUserInfoParamDto.setUserId(activityShareRecords.getMemberNo());
					receiveUserInfoParamDto.setRecommenderUser(activityShareRecords.getRecommendMemberNo());
					userFacade = RemoteServiceFactory.getService(UserFacade.class);
					ReceiveUserInfoResultDTO receiveUserInfoResultDto = userFacade.receiveRecommendUserEvent(receiveUserInfoParamDto);
					if(receiveUserInfoResultDto.isSuccess() == false) {
						logger.info("[userFacade.receiveRecommendUserEvent] ERROR={memberNo, recommendMemberNo}"
								+ activityShareRecords.getMemberNo() + ", " + activityShareRecords.getRecommendMemberNo());
					}
				} catch (Exception e){
					logger.info("[addShareRecord] info={},ERROR={} 调用通知接口异常");
				}
				
			} else {
				
				//会员操作
				ActivityMemberOperecord memberOperecord = new ActivityMemberOperecord();
				memberOperecord.setMemberNo(event.getMemberNo());
				memberOperecord.setMemberTel(event.getMemberTel());
				memberOperecord.setOperateAmount(event.getOperateAmount());
				memberOperecord.setOperateTime(event.getOperateTime());
				memberOperecord.setOperateType(event.getType());
				memberOperecord.setClientIp(event.getClientIp());
				activityMemberOperecordServiceImpl.addActivityMemberOperecord(memberOperecord);
				logger.info("[process] memberOperecord="+memberOperecord);
				
				//注册和绑卡送流量
				if(LMOperationTypeEnum.REGISTER.toString().equals(event.getType()) || LMOperationTypeEnum.BIND_CARD.toString().equals(event.getType())){
					ArenaDetailTypeEnum opeType = ArenaDetailTypeEnum.REGISTER;
					if(LMOperationTypeEnum.BIND_CARD.toString().equals(event.getType())){
						opeType = ArenaDetailTypeEnum.BINDCARD;
					}
					
					//1.查询会员信息，获取渠道号
					MemberDto memberDto = memberManagementFacade.obtainMember(event.getMemberNo());
					logger.info("[process] memberDto="+memberDto);
					//2.根据渠道号和操作类型去查询渠道发放流量规则
					List<ActivitySrcFlowRule> list = new ArrayList<ActivitySrcFlowRule>();
					Map<String,Object> map = new HashMap<String,Object>();
					map.put("srcNo", memberDto.getRegisterSrcNo());
					map.put("opeType", event.getType());
					List<ActivitySrcFlowRule> ruleList = activitySrcFlowRuleServiceImpl.selectRuleListByParams(map);
					if(ruleList.size() != 0 && ruleList.get(0).getSendFlag() == 1){
						list = ruleList;
					}else{
						map.put("srcNo", "default");
						map.put("opeType", event.getType());
						List<ActivitySrcFlowRule> rulelist = activitySrcFlowRuleServiceImpl.selectRuleListByParams(map);
						if(rulelist.size() != 0 && rulelist.get(0).getSendFlag() == 1){
							list = rulelist;
						}
					}
					
					if(list.size() == 0){
						logger.info("[process] info = 不发送流量");
						return;
					}
					if(list.size() > 1){
						logger.info("[process] info = 渠道和操作类型配置规则多于一条");
						return;
					}
					Date today = new Date();
					if(today.getTime() < list.get(0).getStartDate().getTime() || today.getTime() > list.get(0).getEndDate().getTime()){
						logger.info("[process] info = 规则未生效或已过期");
						return;
					}
					logger.info("[process] ruleList ="+list.get(0));
					String cmccCodes = list.get(0).getCmccCode();
					String[] cmccCode = cmccCodes.split("#"); 
					String cuccCodes = list.get(0).getCuccCode();
					String[] cuccCode = cuccCodes.split("#");
					String ctccCodes = list.get(0).getCtccCode();
					String[] ctccCode = ctccCodes.split("#");
					//3.根据渠道号和手机号前三位去查询对应的发放流量通道
					ActivitySrcFlowPlat activitySrcFlowPlat = activitySrcFlowPlatServiceImpl.getSrcPlowPlatBySrcNo(memberDto.getRegisterSrcNo(), event.getMemberTel());
					if(activitySrcFlowPlat == null){
						logger.info("[process] info = 该渠道无流量发放通道");
						return;
					}
					logger.info("[process] activitySrcFlowPlat ="+activitySrcFlowPlat);
					//4.根据手机号判断是移动、联通还是电信(统一配置)
//					String telOpe = "ctcc";
					ConfigParam<Map<String,String>> config = ConfigurationUtils.getConfigParam("config_type_text_resources", "telecom_operators");
					String telOpe= config.getValue().get(event.getMemberTel().substring(0, 3));
					//5.根据流量通道选择调用哪个接口
					//天翼800只充电信
					try{
						if(activitySrcFlowPlat.getFluxPlatCode().equals("ESURFING800")){
							if(!telOpe.equals("ctcc")){
								logger.info("[process] ERROR={} 规则配置错误");
								return;
							}
							//天翼800
							Esurfing800DetailDto esurfing800DetailDto = new Esurfing800DetailDto();
							esurfing800DetailDto.setMemberNo(event.getMemberNo());
							esurfing800DetailDto.setMobileNo(event.getMemberTel());
							esurfing800DetailDto.setInvType(opeType);
							esurfing800DetailDto.setInvAmount(BigDecimal.ZERO);
							esurfing800DetailDto.setInvTime(event.getOperateTime());
							esurfing800DetailDto.setMemberOperecordId(memberOperecord.getId());
							esurfing800DetailDto.setCreateDate(new Date());
							//手机号段
							if(StringUtils.isEmpty(ctccCodes)){
								logger.info("[process] ERROR={} 选择天翼通道却无电信编码");
								return;
							}
							for( int i = 0 ; i < ctccCode.length ;i ++){
								esurfing800DetailDto.setPlatOfferId(ctccCode[i]);
								newLMACTFluxEsuring800Facade.insertEsurfing800Detail(esurfing800DetailDto);
							}
						}else if(activitySrcFlowPlat.getFluxPlatCode().equals("FLUX_PLAT")){
							//流量公社
							FluxPlatDetailDto fluxPlatDetailDto = new FluxPlatDetailDto();
							fluxPlatDetailDto.setMemberNo(event.getMemberNo());
							fluxPlatDetailDto.setMobileNo(event.getMemberTel());
							fluxPlatDetailDto.setInvType(opeType);
							fluxPlatDetailDto.setInvAmount(BigDecimal.ZERO);
							fluxPlatDetailDto.setInvTime(event.getOperateTime());
							fluxPlatDetailDto.setMemberOperecordId(memberOperecord.getId());
							fluxPlatDetailDto.setCreateDate(new Date());
							//手机号段
							if(telOpe.equals("cmcc")){
								if(StringUtils.isEmpty(cmccCodes)){
									logger.info("[process] ERROR={} 选择流量公社无移动编码，规则配置错误");
									return;
								}
								for(int i = 0; i < cmccCode.length; i++){
									fluxPlatDetailDto.setCmccFlowId(cmccCode[i]);
									newLMACTFluxPlatFacade.insertFluxPlatDetail(fluxPlatDetailDto);
								}
							}else if(telOpe.equals("cucc")){
								if(StringUtils.isEmpty(cuccCodes)){
									logger.info("[process] ERROR={} 选择流量公社无联通编码，规则配置错误");
									return;
								}
								for(int i = 0; i < cuccCode.length; i++){
									fluxPlatDetailDto.setCuccFlowId(cuccCode[i]);
									newLMACTFluxPlatFacade.insertFluxPlatDetail(fluxPlatDetailDto);
								}
							}else if(telOpe.equals("ctcc")){
								if(StringUtils.isEmpty(ctccCodes)){
									logger.info("[process] ERROR={} 选择流量公社无电信编码，规则配置错误");
									return;
								}
								for(int i = 0; i < ctccCode.length; i++){
									fluxPlatDetailDto.setCtccFlowId(ctccCode[i]);
									newLMACTFluxPlatFacade.insertFluxPlatDetail(fluxPlatDetailDto);
								}
							}
						}else if(activitySrcFlowPlat.getFluxPlatCode().equals("FLUX_CLOUD")){
							FluxCloudDetailDto fluxCloudDetailDto = new FluxCloudDetailDto();
							fluxCloudDetailDto.setMemberNo(event.getMemberNo());
							fluxCloudDetailDto.setMobileNo(event.getMemberTel());
							fluxCloudDetailDto.setInvType(opeType);
							fluxCloudDetailDto.setInvAmount(BigDecimal.ZERO);
							fluxCloudDetailDto.setInvTime(event.getOperateTime());
							fluxCloudDetailDto.setMemberOperecordId(memberOperecord.getId());
							fluxCloudDetailDto.setCreateDate(new Date());
							//手机号段
							if(telOpe.equals("cmcc")){
								if(StringUtils.isEmpty(cmccCodes)){
									logger.info("[process] ERROR={} 选择流量云无移动编码，规则配置错误");
									return;
								}
								for(int i = 0; i < cmccCode.length; i++){
									fluxCloudDetailDto.setCmccFlowid(cmccCode[i]);
									newLMACTFluxCloudFacade.insertFluxCloudDetail(fluxCloudDetailDto);
								}
							}else if(telOpe.equals("cucc")){
								if(StringUtils.isEmpty(cuccCodes)){
									logger.info("[process] ERROR={} 选择流量云无联通编码，规则配置错误");
									return;
								}
								for(int i = 0; i < cuccCode.length; i++){
									fluxCloudDetailDto.setCuccFlowid(cuccCode[i]);
									newLMACTFluxCloudFacade.insertFluxCloudDetail(fluxCloudDetailDto);
								}
							}else if(telOpe.equals("ctcc")){
								if(StringUtils.isEmpty(ctccCodes)){
									logger.info("[process] ERROR={} 选择流量云却无电信编码，规则配置错误");
									return;
								}
								for(int i = 0; i < ctccCode.length; i++){
									fluxCloudDetailDto.setCtccFlowid(ctccCode[i]);
									newLMACTFluxCloudFacade.insertFluxCloudDetail(fluxCloudDetailDto);
								}
							}
						}
					}catch(Exception e){
						logger.error("[process] ERROR={}",e);
					}
					
				}
			}
		}
	}
}
