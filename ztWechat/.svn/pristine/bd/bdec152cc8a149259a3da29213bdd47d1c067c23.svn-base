package com.yeepay.g3.app.lmweChat.action.zt;

import java.math.BigDecimal;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpSession;

import org.apache.commons.collections.map.HashedMap;
import org.apache.log4j.lf5.util.DateFormatManager;
import org.springframework.stereotype.Controller;

import com.lanmao.fund.facade.fundsales.service.FundCalendarFacade;
import com.lanmao.fund.facade.queryservice.enumtype.FundTypeEnum;
import com.yeepay.g3.app.lmweChat.action.BaseAction;
import com.yeepay.g3.app.lmweChat.utils.LmConstants;
import com.yeepay.g3.facade.lmportal.dto.AccountInfoQueryResultDto;
import com.yeepay.g3.facade.lmportal.dto.MemberDto;
import com.yeepay.g3.facade.lmportal.dto.MemberPwdConstraintDto;
import com.yeepay.g3.facade.lmportal.service.LanmaoDemandFacade;
import com.yeepay.g3.facade.lmportal.service.MemberPasswordFacade;
import com.yeepay.g3.facade.zt.dto.ZtPolicyDTO;
import com.yeepay.g3.facade.zt.dto.ZtPolicyFundOrderDetailDTO;
import com.yeepay.g3.facade.zt.dto.ZtPolicyInvestNewPlanDTO;
import com.yeepay.g3.facade.zt.dto.ZtPolicyOrderAndPlanDTO;
import com.yeepay.g3.facade.zt.dto.ZtPolicyOrderDetailDTO;
import com.yeepay.g3.facade.zt.dto.ZtPolicyProductDTO;
import com.yeepay.g3.facade.zt.dto.ZtPurFeeDetailDTO;
import com.yeepay.g3.facade.zt.dto.ZtPurchaseParamDTO;
import com.yeepay.g3.facade.zt.dto.ZtUserPolicyFundPropertionDTO;
import com.yeepay.g3.facade.zt.enums.PolicyFundOrderDetailStatusEnum;
import com.yeepay.g3.facade.zt.enums.ZtFundTypeEnum;
import com.yeepay.g3.facade.zt.facade.ZtPolicyCalculateFacade;
import com.yeepay.g3.facade.zt.facade.ZtPolicyFacade;
import com.yeepay.g3.facade.zt.facade.ZtPolicyFundOrderDetailFacade;
import com.yeepay.g3.facade.zt.facade.ZtPolicyOrderDetailFacade;
import com.yeepay.g3.facade.zt.facade.ZtPolicyProductFacade;
import com.yeepay.g3.facade.zt.facade.ZtPurchaseFacade;
import com.yeepay.g3.utils.common.CheckUtils;
import com.yeepay.g3.utils.common.StringUtils;
import com.yeepay.g3.utils.rmi.RemoteServiceFactory;
import com.yeepay.g3.utils.rmi.RemotingProtocol;
import com.yeepay.g3.utils.web.emvc.annotation.Param;


/**
 * 智能投资购买Action
 * 
 * @Copyright: Copyright (c)2011
 * @company 懒猫金服
 * @author ping.zhu
 * @since 2016-10-26
 * @version 1.0
 */
@Controller
public class PurchaseAction extends BaseAction{
//	
	protected ZtPolicyProductFacade ztPolicyProductFacade = RemoteServiceFactory.getService(ZtPolicyProductFacade.class);
	protected ZtPolicyFacade ztPolicyFacade=RemoteServiceFactory.getService(ZtPolicyFacade.class);
	protected ZtPurchaseFacade ztPurchaseFacade=RemoteServiceFactory.getService(ZtPurchaseFacade.class);
	protected ZtPolicyOrderDetailFacade ztPolicyOrderDetailFacade=RemoteServiceFactory.getService(ZtPolicyOrderDetailFacade.class);
	protected ZtPolicyFundOrderDetailFacade ztPolicyFundOrderDetailFacade = RemoteServiceFactory.getService(ZtPolicyFundOrderDetailFacade.class);
	protected ZtPolicyCalculateFacade ztPolicyCalculateFacade = RemoteServiceFactory.getService(ZtPolicyCalculateFacade.class);
	
	protected LanmaoDemandFacade lanmaoDemandFacade=RemoteServiceFactory.getService(LanmaoDemandFacade.class);
	protected MemberPasswordFacade memberPasswordFacade = RemoteServiceFactory.getService(MemberPasswordFacade.class);
	protected FundCalendarFacade fundCalendarFacade= RemoteServiceFactory.getService(FundCalendarFacade.class);
	
	
//	protected ZtPolicyProductFacade ztPolicyProductFacade = RemoteServiceFactory.getService("http://localhost:8080/activity-hessian/", RemotingProtocol.HESSIAN, ZtPolicyProductFacade.class);
//	protected ZtPolicyFacade ztPolicyFacade=RemoteServiceFactory.getService("http://localhost:8080/activity-hessian/", RemotingProtocol.HESSIAN, ZtPolicyFacade.class);
//	private ZtPolicyFundOrderDetailFacade ztPolicyFundOrderDetailFacade = RemoteServiceFactory.getService("http://localhost:8080/activity-hessian/", RemotingProtocol.HESSIAN, ZtPolicyFundOrderDetailFacade.class);
//	private ZtPolicyCalculateFacade ztPolicyCalculateFacade = RemoteServiceFactory.getService("http://localhost:8080/activity-hessian/", RemotingProtocol.HESSIAN, ZtPolicyCalculateFacade.class);
//	private ZtPurchaseFacade ztPurchaseFacade = RemoteServiceFactory.getService("http://localhost:8080/activity-hessian/", RemotingProtocol.HESSIAN, ZtPurchaseFacade.class);
//	private ZtPolicyOrderDetailFacade ztPolicyOrderDetailFacade = RemoteServiceFactory.getService("http://localhost:8080/activity-hessian/", RemotingProtocol.HESSIAN, ZtPolicyOrderDetailFacade.class);


	/**
	 * 去购买组合页面
	 * @param policyId
	 * @param isFirstBuyThisPolicy 是否第一次购买这个策略id
     * @author ping.zhu
	 */
	public String toPurchase(@Param("sceneId") Long sceneId,
			@Param("policyId") Long policyId,
			@Param("policyOrderId") Long policyOrderId,
			@Param("purAmount") BigDecimal purAmount) {
		/**
		 * 懒猫账户余额
		 */
		DecimalFormat df=new DecimalFormat("0.00");
		BigDecimal accountBalance=null;
		HttpSession session = getMvcFacade().getHttpSession();
		MemberDto memberDto = (MemberDto) session.getAttribute("member");
//		List<Map<String,Object>> productResultList=new ArrayList<Map<String,Object>>();
//		Map<String,Object> productMap=new HashMap<String, Object>();
		//1.查询懒猫账户余额
		try {
			AccountInfoQueryResultDto accountInfoQueryResultDto = lanmaoDemandFacade
					.queryAccount(memberDto.getMemberNo(), new Date());
			accountBalance = accountInfoQueryResultDto == null
					|| accountInfoQueryResultDto.getAmount() == null ? BigDecimal.ZERO
					: accountInfoQueryResultDto.getAmount();
			addModelObject("accountBalance", df.format(accountBalance));
		} catch (Exception e) {
			logger.error("[toPurchase] info={},ERROR={}", "查询用户"+memberDto.getMemberNo()+"懒猫账户余额时异常",
					e.getMessage());
		}
		List<ZtUserPolicyFundPropertionDTO> resultlist=null;
		BigDecimal fee=new BigDecimal(0);
		ZtUserPolicyFundPropertionDTO fundProDto=null;
		//2.判断用户是否是首次购买这个策略id，如果是：不用重新计算基金占比
		if(null!=policyId&&null!=sceneId){
			//(1).根据策略id查询当前策略的各个产品占比和
			List<ZtPolicyProductDTO> productList=ztPolicyProductFacade.selectPolicyProductList(policyId);
			//(2).根据策略id查询当前策略名称，起投金额
			ZtPolicyDTO policy=ztPolicyFacade.selectPolicyByPrimaryKey(policyId);
			resultlist=new ArrayList<ZtUserPolicyFundPropertionDTO>();
			for(ZtPolicyProductDTO item:productList){
				fundProDto=new ZtUserPolicyFundPropertionDTO();
				fundProDto.setAdditionalAmount(purAmount.multiply(item.getProductProportion()));
				fundProDto.setAdditionalProportion(item.getProductProportion());
				fundProDto.setFundCode(item.getProductCode());
				fundProDto.setFundName(item.getProductName());
				fundProDto.setFundType(item.getProductType());
				fundProDto.setFundMinAmount(item.getProductMinAmount());
				resultlist.add(fundProDto);
			}
			addModelObject("resultList", resultlist);
			addModelObject("policyName", policy.getPolicyName());
			addModelObject("purAmount", purAmount);
			addModelObject("sceneId", sceneId);
			addModelObject("policyId", policyId);
			addModelObject("minBuy", policy.getMinPurchaseAmount().setScale(0,BigDecimal.ROUND_HALF_UP));
			}
		//3.已经购买过这个策略的用户
		else if(null!=policyOrderId){
			BigDecimal amount=null;
			//根据会员策略交易汇总id查询
			//查询用户策略投资计划表每月需要投多少钱，本月已经投资了多少钱  参数：会员编号 策略id
			ZtPolicyOrderAndPlanDTO ztPolicyOrderAndPlanDTO=null;
			try {
				logger.info("[toPurchase] info={}",policyOrderId);				
				ztPolicyOrderAndPlanDTO = ztPurchaseFacade.queryUserPolicyOrderAndPlan(policyOrderId, memberDto.getMemberNo());
				BigDecimal perInvestAmount=ztPolicyOrderAndPlanDTO.getZtPolicyInvestPlanDTO().getPerInvestAmount();
				BigDecimal curTermInvestAmount=ztPolicyOrderAndPlanDTO.getZtPolicyOrderDTO().getCurTermInvestAmount();
				ZtPolicyDTO policy=ztPolicyFacade.selectPolicyByPrimaryKey(ztPolicyOrderAndPlanDTO.getZtPolicyInvestPlanDTO().getPolicyId());
				addModelObject("policyName", policy.getPolicyName());
				//(1).如果本月投资金额为0  investAmount 是指本月剩余应投金额  并带入购买页面
				if(curTermInvestAmount.compareTo(BigDecimal.ZERO)==0){
					amount=perInvestAmount;
				//(2).当月累计投资金额<每月定投金额
				}else if(perInvestAmount.compareTo(curTermInvestAmount)>0){
					//投资金额=计划投资金额-当月累计投资金额 
					amount=perInvestAmount.subtract(curTermInvestAmount);
				}else{
					amount=new BigDecimal(0);
				}
				addModelObject("minBuy", policy.getMinPurchaseAmount().setScale(0,BigDecimal.ROUND_HALF_UP));
			} catch (Exception e) {
				logger.error("[toPurchase] info={},ERROR={}", "查询投资计划和已投金额时异常",
						e.getMessage());
			}
			addModelObject("policyOrderId", policyOrderId);
			addModelObject("purAmount",amount);
			resultlist=ztPurchaseFacade.calculatePolicyFundProportionBalance(amount, policyOrderId);
			addModelObject("resultList", resultlist);
		}else{
			//系统异常
			return FAILED;
		}
		//查询预估手续费
		try {
			List<ZtPurFeeDetailDTO> feeList=ztPurchaseFacade.queryPurchaseFeeDetail(resultlist);
			if(!CheckUtils.isEmpty(feeList)){
				for(ZtPurFeeDetailDTO item:feeList){
					//TODO 折扣前手续费没有添加
					fee=fee.add(item.getRealFareSx());
				}
			}
		} catch (Exception e) {
			logger.error("[toPurchase] info={},ERROR={}", "查询手续费异常",
					e.getMessage());		
			}
		addModelObject("fee", df.format(fee));
		
		return SUCCESS;
	}
	
	
	/**
	 * 
	* @Description: 计算基金占比
	* @author ping.zhu   
	* @date 2016年11月8日 上午9:39:23 
	* @param policyOrderId
	* @param purAmount
	* @return
	 */
	public String calculateProportion(@Param("policyOrderId") Long policyOrderId,
			@Param("purAmount") BigDecimal purAmount){
		if(CheckUtils.isEmpty(purAmount)&&CheckUtils.isEmpty(policyOrderId)){
			logger.error("[calculateProportion] info={},ERROR={}", "计算基金占比时参数为空");
			return JSON;
		}
		Map<String,List<ZtUserPolicyFundPropertionDTO>> map=new HashMap<String, List<ZtUserPolicyFundPropertionDTO>>();
		try{
			List<ZtUserPolicyFundPropertionDTO> list=ztPurchaseFacade.calculatePolicyFundProportionBalance(purAmount, policyOrderId);
			map.put("proportion", list);
			setJsonModel(map);
		}catch(Exception e){
			logger.error("[calculateProportion] info={},ERROR={}", "计算基金占比时异常",e.getMessage());
		}
		return JSON;
	}
	
	
	/**
	* @Description: 组合购买
	* @author ping.zhu   
	* @date 2016年11月8日 上午9:40:30 
	 */
	public String purchase(@Param("fundList") String fundList,
			@Param("tradePwd") String tradePwd,
			@Param("sceneId") Long sceneId,
			@Param("policyId") Long policyId,
			@Param("policyOrderId") Long policyOrderId) {
		HttpSession session = getMvcFacade().getHttpSession();
		MemberDto memberDto = (MemberDto) session.getAttribute("member");
		Map<String,Object> resultMap = new HashMap<String, Object>();
		if(StringUtils.isEmpty(fundList)){
			resultMap.put("status", SYSTEM_EXCEPTION);
			setJsonModel(resultMap);
			return JSON;
		}
		
		List<ZtUserPolicyFundPropertionDTO> list=new ArrayList<ZtUserPolicyFundPropertionDTO>();
		ZtUserPolicyFundPropertionDTO item=null;
		BigDecimal purMoney=new BigDecimal(0);
		for(String fund:fundList.split("#")){
			item=new ZtUserPolicyFundPropertionDTO();
			String[] fundDetail=fund.split(";");
			for(int i=0;i<5;i++){
				switch(i){
				case 0:
					item.setFundName(fundDetail[i]);
					break;
				case 1:
					item.setAdditionalProportion(new BigDecimal(fundDetail[i]));
					break;
				case 2:
					item.setAdditionalAmount(new BigDecimal(fundDetail[i]));
					purMoney=purMoney.add(new BigDecimal(fundDetail[i]));
					break;
				case 3:
					item.setFundCode(fundDetail[i]);
					break;
				case 4:
					if(ZtFundTypeEnum.BOND.toString().equals(fundDetail[i])){
					item.setFundType(ZtFundTypeEnum.BOND);
					}else{
						item.setFundType(ZtFundTypeEnum.STOCK);
					}
					break;
				}
			}
			list.add(item);
		}
		try {
			
			// 验证交易密码
			MemberPwdConstraintDto memberPwdConstraintDto = memberPasswordFacade.checkTradePassword(memberDto.getMemberNo(), tradePwd);
			if (!memberPwdConstraintDto.getResultFlag()) {
				resultMap.put("status", "WRONG_PWD");
				resultMap.put("description", memberPwdConstraintDto);
				setJsonModel(resultMap);
				return JSON;
			}
			
			ZtPurchaseParamDTO paramDto = new ZtPurchaseParamDTO();
			if(null!=sceneId&&null!=policyId){
				paramDto.setSceneId(sceneId);
				paramDto.setPolicyId(policyId);
			}else if(null!=policyOrderId){
				paramDto.setPolicyOrderId(policyOrderId);
			}
			paramDto.setPurchaseMoney(purMoney);
			paramDto.setMemberNo(memberDto.getMemberNo());
			paramDto.setMerchantNo(LmConstants.getZTMerchantNo());
			paramDto.setFundList(list);
			Long orderDetailId=ztPurchaseFacade.purchasePolicy(paramDto);
			if(null==orderDetailId){
				resultMap.put("status", SYSTEM_EXCEPTION);
				resultMap.put("orderDetailId", orderDetailId);
				setJsonModel(resultMap);
				return JSON;
			}
			resultMap.put("status", "SUCCESS");
			resultMap.put("orderDetailId", orderDetailId);
			setJsonModel(resultMap);
		} catch (Exception e) {
			logger.error("[groupPurchase] info={},ERROR={}", "购买组合基金时异常",e.getMessage());
			resultMap.put("status", SYSTEM_EXCEPTION);
			setJsonModel(resultMap);
			return JSON;
		}
		return JSON;
	}
	
	/**
	* @Description: 购买成功页面
	* @author ping.zhu   
	* @date 2016年11月8日 下午1:52:59 
	 */
	public String toPurchaseSuccess(@Param("orderDetailId") Long orderDetailId,@Param("fee") BigDecimal fee) {
		HttpSession session = getMvcFacade().getHttpSession();
		MemberDto memberDto = (MemberDto) session.getAttribute("member");
		DecimalFormat df=new DecimalFormat("0.00");
		DateFormat format1 = new SimpleDateFormat("yyyy-MM-dd");
		//1.根据策略订单id查询基金订单详情
		List<Map<String,Object>> fundList=new ArrayList<Map<String,Object>>();
		Map<String,Object> map=null;
		BigDecimal purMoney=new BigDecimal(0);
		List<ZtPolicyFundOrderDetailDTO> list = ztPolicyFundOrderDetailFacade
				.queryFundDetailByPolOrdDetialId(orderDetailId,memberDto.getMemberNo());
		if(!CheckUtils.isEmpty(list)){
			for(ZtPolicyFundOrderDetailDTO item:list){
				//失败不展示
				if(item.getStatus()!=PolicyFundOrderDetailStatusEnum.PURCHASECOMMIT){
					continue;
				}
				map=new HashMap<String, Object>();
				map.put("fundName", item.getZtPolicyProductDTO().getProductName());
				map.put("amount", df.format(item.getBalance()));
				purMoney=purMoney.add(item.getBalance());
				fundList.add(map);
			}
		}
		addModelObject("purMoney", df.format(purMoney));
		addModelObject("fundList", fundList);
		addModelObject("fee", df.format(fee));
		
		//2.计算下月应投金额
		try {
			ZtPolicyOrderDetailDTO ztPolicyOrderDetailDTO=ztPolicyOrderDetailFacade.queryPolicyOrderDetailById(orderDetailId,memberDto.getMemberNo());
			addModelObject("policyOrderId", ztPolicyOrderDetailDTO.getPolicyOrderId());
			ZtPolicyOrderAndPlanDTO ztPolicyOrderAndPlanDTO = ztPurchaseFacade.queryUserPolicyOrderAndPlan(ztPolicyOrderDetailDTO.getPolicyOrderId(), memberDto.getMemberNo());
			ZtPolicyDTO policy=ztPolicyFacade.selectPolicyByPrimaryKey(ztPolicyOrderAndPlanDTO.getZtPolicyOrderDTO().getPolicyId());
			addModelObject("sceneName", ztPolicyOrderAndPlanDTO.getZtPolicyInvestPlanDTO().getPolicyCalculateType().toString());
			addModelObject("policyName", policy.getPolicyName());
			BigDecimal perInvestAmount=ztPolicyOrderAndPlanDTO.getZtPolicyInvestPlanDTO().getPerInvestAmount();
			BigDecimal curTermInvestAmount=ztPolicyOrderAndPlanDTO.getZtPolicyOrderDTO().getCurTermInvestAmount();
			if(df.format(purMoney.add(curTermInvestAmount)).equals(df.format(perInvestAmount))){
				addModelObject("nextMonthBuy",df.format(perInvestAmount));
			}else if(purMoney.add(curTermInvestAmount).compareTo(perInvestAmount)==-1){
				addModelObject("thisMonthBuy", df.format(perInvestAmount.subtract(curTermInvestAmount).subtract(purMoney)));
			}else{
				//重新计算临时策略
				Long id=ztPolicyOrderAndPlanDTO
						.getZtPolicyInvestPlanDTO().getId();
				ZtPolicyInvestNewPlanDTO ztPolicyInvestNewPlanDto = ztPolicyCalculateFacade
						.calculatePolicyInvestNewPlan(ztPolicyOrderAndPlanDTO
								.getZtPolicyInvestPlanDTO().getId(), orderDetailId);
				addModelObject("nextMonthBuy", df.format(ztPolicyInvestNewPlanDto.getNewPerInvestAmount()));
			}
		} catch (Exception e) {
			logger.error("[toPurchaseSuccess] info={},ERROR={}", "查询收益时间时异常",e.getMessage());
		}
		
		//3.查询收益时间
		try {
			List<Date> dateList=fundCalendarFacade.queryNextNFundWorKDay(new Date(), 0, 2);
			addModelObject("comfirmDay", format1.format(dateList.get(0)));
			addModelObject("incomeDay", format1.format(dateList.get(1)));
			addModelObject("buyDay", new SimpleDateFormat("yyyy-MM-dd").format(new Date()));
		} catch (Exception e) {
			logger.error("[toPurchaseSuccess] info={},ERROR={}", "查询收益时间时异常",e.getMessage());
		}
		return SUCCESS;
	}
	
	/**
	* @Description: 预估手续费
	* @author ping.zhu   
	* @date 2016年11月8日 下午3:02:47 
	 */
	public String calculateFee(@Param("fundList")String fundList){
		List<ZtUserPolicyFundPropertionDTO> list=new ArrayList<ZtUserPolicyFundPropertionDTO>();
		ZtUserPolicyFundPropertionDTO item=null;
		Map<String,Object> resultMap=new HashMap<String, Object>();
		try {
			for(String fund:fundList.split("#")){
				item=new ZtUserPolicyFundPropertionDTO();
				String[] fundDetail=fund.split(";");
				for(int i=0;i<4;i++){
					switch(i){
					case 0:
						item.setFundName(fundDetail[i]);
						break;
					case 1:
						item.setAdditionalProportion(new BigDecimal(fundDetail[i]));
						break;
					case 2:
						item.setAdditionalAmount(new BigDecimal(fundDetail[i]));
						break;
					case 3:
						item.setFundCode(fundDetail[i]);
						break;
					}
				}
				list.add(item);
			}
			BigDecimal realFee=new BigDecimal(0);
			BigDecimal fee=new BigDecimal(0);
			List<ZtPurFeeDetailDTO> resultList=ztPurchaseFacade.queryPurchaseFeeDetail(list);
			for(ZtPurFeeDetailDTO feeDto:resultList){
				realFee=realFee.add(feeDto.getRealFareSx());
				fee=fee.add(feeDto.getFareSx());
			}
			resultMap.put("realFee", realFee);
			resultMap.put("fee", fee);
			setJsonModel(resultMap);
		} catch (Exception e) {
			resultMap.put("status", SYSTEM_EXCEPTION);
			setJsonModel(resultMap);
			logger.error("[calculateFee] info={},ERROR={}", "计算手续费时异常",e.getMessage());

		}
		return JSON;
	}
	
	/**
	* @Description: 去手续费详情页面
	* @author ping.zhu   
	* @date 2016年11月8日 下午3:03:22 
	 */
	public String toPurchaseFeeDetail(@Param("policyId") Long policyId,
			@Param("policyOrderId") Long policyOrderId,
			@Param("purAmount") BigDecimal purAmount){
		List<ZtUserPolicyFundPropertionDTO> fundList=null;
		ZtUserPolicyFundPropertionDTO fundProDto=null;
		DecimalFormat df =new DecimalFormat("0.00");
		if (null != policyId&&purAmount!=null) {
			try {
				// (1).根据策略id查询当前策略的各个产品占比和
				List<ZtPolicyProductDTO> productList = ztPolicyProductFacade
						.selectPolicyProductList(policyId);
				fundList = new ArrayList<ZtUserPolicyFundPropertionDTO>();
				for (ZtPolicyProductDTO item : productList) {
					fundProDto = new ZtUserPolicyFundPropertionDTO();
					fundProDto.setAdditionalAmount(purAmount.multiply(item.getProductProportion()));
					fundProDto.setAdditionalProportion(item.getProductProportion());
					fundProDto.setFundCode(item.getProductCode());
					fundProDto.setFundName(item.getProductName());
					fundProDto.setFundMinAmount(item.getProductMinAmount());
					fundList.add(fundProDto);
				}
			} catch (Exception e) {
				logger.error("[toPurchaseFeeDetail] info={},ERROR={}", "查询基金占比时异常",e.getMessage());
				return SYSTEM_EXCEPTION;
			}
		}else if(policyOrderId!=null&&purAmount!=null){
			try {
				fundList=ztPurchaseFacade.calculatePolicyFundProportionBalance(purAmount, policyOrderId);
			} catch (Exception e) {
				logger.error("[toPurchaseFeeDetail] info={},ERROR={}", "查询基金占比时异常",e.getMessage());
				return SYSTEM_EXCEPTION;
			}
		}
		try{
			BigDecimal totalFee=new BigDecimal(0);
			List<ZtPurFeeDetailDTO> resultList=ztPurchaseFacade.queryPurchaseFeeDetail(fundList);
			if(!CheckUtils.isEmpty(resultList)){
				for(ZtPurFeeDetailDTO item:resultList){
					totalFee=totalFee.add(item.getRealFareSx());
				}
			}
			addModelObject("feeList", resultList);
			addModelObject("totalFee", df.format(totalFee));
		}catch(Exception e){
			logger.error("[toPurchaseFeeDetail] info={},ERROR={}", "计算基金费率时异常",e.getMessage());
			return SYSTEM_EXCEPTION;
		}
		return SUCCESS;
	}
	public static void main(String args[]){
			DecimalFormat df=new DecimalFormat("0.00");
			df.format(new BigDecimal(0.000));
	}
}
