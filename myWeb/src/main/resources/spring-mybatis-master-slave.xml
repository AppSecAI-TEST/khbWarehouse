<?xml version="1.0" encoding="UTF-8"?>  
<beans xmlns="http://www.springframework.org/schema/beans"  
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"  
    xmlns:context="http://www.springframework.org/schema/context"  
    xmlns:mvc="http://www.springframework.org/schema/mvc"  
    xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xsi:schemaLocation="http://www.springframework.org/schema/beans    
                        http://www.springframework.org/schema/beans/spring-beans-3.1.xsd    
                        http://www.springframework.org/schema/context    
                        http://www.springframework.org/schema/context/spring-context-3.1.xsd
                        http://www.springframework.org/schema/tx
                        http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
                        http://www.springframework.org/schema/aop
                        http://www.springframework.org/schema/aop/spring-aop-3.1.xsd    
                        http://www.springframework.org/schema/mvc    
                        http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd">  
    <!-- 配置连接池 -->  
    <bean id="masterDataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init"   
        destroy-method="close">
        
        <property name="driverClassName" value="${jdbc.master.driver}" />  
        <property name="url" value="${jdbc.master.url}" />  
        <property name="username" value="${jdbc.master.username}" />  
        <property name="password" value="${jdbc.master.password}" />  
        <!-- 初始化连接大小 -->  
        <property name="initialSize" value="${jdbc.master.initialSize}"></property>  
        <!-- 连接池最大数量 -->  
        <property name="maxActive" value="${jdbc.master.maxActive}"></property>  
        <!-- 连接池最大空闲 -->  
        <property name="maxIdle" value="${jdbc.master.maxIdle}"></property>  
        <!-- 连接池最小空闲 -->  
        <property name="minIdle" value="${jdbc.master.minIdle}"></property>  
        <!-- 获取连接最大等待时间 -->  
        <property name="maxWait" value="${jdbc.master.maxWait}"></property>  
        
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		<!-- 毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="300000" />
		<property name="validationQuery" value="select 1" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />
		<!-- 配置监控统计拦截的filters -->
	    <property name="filters" value="stat" />
        
    </bean>  
      
    <!-- 配置连接池 -->  
    <bean id="slave01DataSource" class="com.alibaba.druid.pool.DruidDataSource"  init-method="init"  
        destroy-method="close">  
        <property name="driverClassName" value="${jdbc.slave01.driver}" />  
        <property name="url" value="${jdbc.slave01.url}" />  
        <property name="username" value="${jdbc.slave01.username}" />  
        <property name="password" value="${jdbc.slave01.password}" />  
        <!-- 初始化连接大小 -->  
        <property name="initialSize" value="${jdbc.slave01.initialSize}"></property>  
        <!-- 连接池最大数量 -->  
        <property name="maxActive" value="${jdbc.slave01.maxActive}"></property>  
        <!-- 连接池最大空闲 -->  
        <property name="maxIdle" value="${jdbc.slave01.maxIdle}"></property>  
        <!-- 连接池最小空闲 -->  
        <property name="minIdle" value="${jdbc.slave01.minIdle}"></property>  
        <!-- 获取连接最大等待时间 -->  
        <property name="maxWait" value="${jdbc.slave01.maxWait}"></property>  
        
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		<!-- 毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="300000" />
		<property name="validationQuery" value="select 1" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />
		<!-- 配置监控统计拦截的filters -->
	    <property name="filters" value="stat" />
         
    </bean>   
    
    <!-- 定义数据源，使用自己实现的数据源 -->  
    <bean id="dataSource" class="com.xinnet.mysql.readwriteseparation.DynamicDataSource">  
        <!-- 设置多个数据源 -->  
        <property name="targetDataSources">  
            <map key-type="java.lang.String">  
                <!-- 这个key需要和程序中的key一致 -->  
                <entry key="master" value-ref="masterDataSource"/>  
                <entry key="slave" value-ref="slave01DataSource"/>  
            </map>  
        </property>  
        <!-- 设置默认的数据源，这里默认走写库 -->  
        <property name="defaultTargetDataSource" ref="masterDataSource"/>  
    </bean> 
    
    <!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->  
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">  
        <property name="dataSource" ref="dataSource"></property> 
        <!-- 自动扫描mapping.xml文件 -->  
        <property name="mapperLocations" value="classpath:mapping/*.xml"></property>  
        <!-- 指定sqlMapConfig总配置文件，订制的environment在spring容器中不在生效-->  
        <property name="configLocation"  value="classpath:sqlMapConfig.xml"></property> 
    </bean>  
  
    <!-- DAO接口所在包名，Spring会自动查找其下的类 -->  
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">  
        <property name="basePackage" value="com.xinnet.dao" />  
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>  
    </bean>  
    
    
    <!-- 定义事务管理器 -->  
    <bean id="transactionManager"  
        class="org.springframework.jdbc.datasource.DataSourceTransactionManager">  
        <property name="dataSource" ref="dataSource" />  
    </bean>
    
    <!-- 定义事务策略 -->  
    <tx:advice id="txAdvice" transaction-manager="transactionManager">  
        <tx:attributes>  
            <!--定义查询方法都是只读的 -->  
            <tx:method name="query*" propagation="SUPPORTS" />  
            <tx:method name="find*" propagation="SUPPORTS" />  
            <tx:method name="get*" propagation="SUPPORTS" />  
            <tx:method name="select*" propagation="SUPPORTS" />  
  
            <!-- 主库执行操作，事务传播行为定义为默认行为 -->  
            <tx:method name="save*" propagation="REQUIRED" />  
            <tx:method name="update*" propagation="REQUIRED" />  
            <tx:method name="delete*" propagation="REQUIRED" />  
  
            <!--其他方法使用默认事务策略 -->  
            <tx:method name="*" />  
        </tx:attributes>  
    </tx:advice>
    
    <!-- 定义AOP切面处理器 -->  
    <bean class="com.xinnet.mysql.readwriteseparation.DataSourceAspect" id="dataSourceAspect" />  
  
    <aop:config>
        <!-- 定义切面，所有的service的所有方法 -->  
        <aop:pointcut id="txPointcut" expression="execution(* com.xinnet.service.*.*(..))" />  
        <!-- 应用事务策略到Service切面 -->  
        <aop:advisor advice-ref="txAdvice" pointcut-ref="txPointcut"/>  
          
        <!-- 将切面应用到自定义的切面处理器上，-9999保证该切面优先级最高执行 -->  
        <aop:aspect ref="dataSourceAspect" order="-9999">  
            <aop:before method="before" pointcut-ref="txPointcut" />  
        </aop:aspect>  
    </aop:config> 
  
</beans>